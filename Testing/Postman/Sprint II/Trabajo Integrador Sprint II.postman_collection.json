{
	"info": {
		"_postman_id": "47e46680-e8bb-461e-a520-20f50f5c46d1",
		"name": "Trabajo Integrador",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Categorías",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos son iguales a los enviados\", function () {\r",
									"    pm.expect(dataReq.titulo).to.eql(dataRes.titulo);\r",
									"    pm.expect(dataReq.descripcion).to.eql(dataRes.descripcion);\r",
									"    pm.expect(dataReq.urlImagen).to.eql(dataRes.urlImagen);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Hotel de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-lujo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Hotel de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-lujo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].titulo).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].urlImagen).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0 e igual al enviado\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"    pm.expect(dataRes.id).to.eql(dataReq.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"titulo\": \"Parador\",\r\n    \"descripcion\": \"Para descansar en tus viajes...\",\r\n    \"urlImagen\": \"http://www.imagen-lujo-renovada.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Hotel de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-lujo-renovada.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"categoria_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"categoria_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"categoria_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/{{categoria_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"{{categoria_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ciudades",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos son iguales a los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.pais).to.eql(dataRes.pais);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Bahía Blanca\",\r\n    \"pais\": \"Argentina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Bahía Blanca\",\r\n    \"pais\": \"Argentina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].pais).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0 e igual al enviado\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"    pm.expect(dataRes.id).to.eql(dataReq.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"nombre\": \"Miami\",\r\n    \"pais\": \"Estados Unidos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Miami\",\r\n    \"pais\": \"Estados Unidos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"ciudad_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"ciudad_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"ciudad_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/{{ciudad_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"{{ciudad_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Características",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos son iguales a los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.icono).to.eql(dataRes.icono);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Gimnasio\",\r\n    \"icono\": \"fa-gimnasio\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Gimnasio\",\r\n    \"icono\": \"fa-gimnasio\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].icono).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0 e igual al enviado\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"    pm.expect(dataRes.id).to.eql(dataReq.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"nombre\": \"Masajes\",\r\n    \"icono\": \"fa-masajes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin iD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Masajes\",\r\n    \"icono\": \"fa-masajes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"caracteristica_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"caracteristica_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"caracteristica_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/{{caracteristica_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"{{caracteristica_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Imágenes",
			"item": [
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/imagenes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"url\", \"producto\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.url).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.producto).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"El producto no es nulo, su ID no es nulo y el ID es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.producto).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.producto.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/imagenes/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"imagenes",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/imagenes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/imagenes/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"imagenes",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/imagenes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"titulo\", \"url\", \"producto\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].titulo).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].url).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos no son nulos, sus ID's no son nulos y los ID's son un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].producto.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/imagenes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"imagenes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Productos",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.descripcion).to.eql(dataRes.descripcion);\r",
									"    pm.expect(dataReq.ciudad.id).to.eql(dataRes.ciudad.id);\r",
									"    pm.expect(dataReq.categoria.id).to.eql(dataRes.categoria.id);\r",
									"\r",
									"    // Comparo las imágenes por título al no haber ID's en el Request\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataReq.imagenes[i].titulo).to.eql(dataRes.imagenes[i].titulo);\r",
									"    }\r",
									"\r",
									"    // Lo siguiente es necesario porque el orden del array de caracteristicas no es predecible (porque es un Set)\r",
									"    const caracteristicasIDsReq = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsReq.push(dataReq.caracteristicas[i].id);\r",
									"    }\r",
									"    const caracteristicasIDsRes = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsRes.push(dataRes.caracteristicas[i].id);\r",
									"    }\r",
									"    pm.expect(_.isEqual(_.sortBy(caracteristicasIDsReq), _.sortBy(caracteristicasIDsRes))).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Producto 001\",\r\n    \"descripcion\": \"El mejor producto\",\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 3\r\n    },\r\n    \"imagenes\": [\r\n        { \"titulo\": \"Imagen 001\", \"url\": \"http://www.imagen001.com\" }\r\n    ],\r\n    \"caracteristicas\": [\r\n        { \"id\": 1 },\r\n        { \"id\": 3 }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Producto 001\",\r\n    \"descripcion\": \"El mejor producto\",\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 3\r\n    },\r\n    \"imagenes\": [\r\n        { \"titulo\": \"Imagen 001\", \"url\": \"http://www.imagen001.com\" }\r\n    ],\r\n    \"caracteristicas\": [\r\n        { \"id\": 1 },\r\n        { \"id\": 3 }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.descripcion).to.eql(dataRes.descripcion);\r",
									"    pm.expect(dataReq.ciudad.id).to.eql(dataRes.ciudad.id);\r",
									"    pm.expect(dataReq.categoria.id).to.eql(dataRes.categoria.id);\r",
									"\r",
									"    // Comparo las imágenes por título al no haber ID's en el Request\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataReq.imagenes[i].titulo).to.eql(dataRes.imagenes[i].titulo);\r",
									"    }\r",
									"\r",
									"    // Lo siguiente es necesario porque el orden del array de caracteristicas no es predecible (porque es un Set)\r",
									"    const caracteristicasIDsReq = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsReq.push(dataReq.caracteristicas[i].id);\r",
									"    }\r",
									"    const caracteristicasIDsRes = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsRes.push(dataRes.caracteristicas[i].id);\r",
									"    }\r",
									"    pm.expect(_.isEqual(_.sortBy(caracteristicasIDsReq), _.sortBy(caracteristicasIDsRes))).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"nombre\": \"Producto-003\",\r\n    \"descripcion\": \"Bad hotel, run for your life.\",\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"imagenes\": [],\r\n    \"caracteristicas\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Producto 002\",\r\n    \"descripcion\": \"El mejor producto\",\r\n    \"ciudad\": {\r\n        \"id\": 2\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"imagenes\": [],\r\n    \"caracteristicas\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Ciudad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar?ciudad=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen como nombre el parámetro proporcionado\", function () {\r",
									"    const nombreEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad.nombre).eql(nombreEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar?ciudad=Mendoza",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar"
							],
							"query": [
								{
									"key": "ciudad",
									"value": "Mendoza"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar?categoria=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen como título el parámetro proporcionado\", function () {\r",
									"    const tituloEnviado = request.url.split(\"=\").at(-1).replace('+', ' ');\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria.titulo).eql(tituloEnviado);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar?categoria=Hotel+Urbano",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar"
							],
							"query": [
								{
									"key": "categoria",
									"value": "Hotel+Urbano"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Ciudad & Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar?\");\r",
									"    pm.expect(request.url).to.have.string(\"ciudad\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"    pm.expect(request.url).to.have.string(\"&\");\r",
									"    pm.expect(request.url).to.have.string(\"categoria\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen como nombre el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const nombreEnviado = request.url.split(/[=&]+/).at(-3);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad.nombre).eql(nombreEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen como título el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const tituloEnviado = request.url.split(/[=&]+/).at(-1).replace('+', ' ');\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria.titulo).eql(tituloEnviado);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar?ciudad=Mendoza&categoria=Hotel+Urbano",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar"
							],
							"query": [
								{
									"key": "ciudad",
									"value": "Mendoza"
								},
								{
									"key": "categoria",
									"value": "Hotel+Urbano"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add imagenes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"agregar-imagenes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición es un array\", function () {\r",
									"    pm.expect(dataReq).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataReq).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.not.have.any.keys(\"id\");\r",
									"        pm.expect(dataReq[i]).to.have.all.keys([\"titulo\", \"url\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataReq[i].titulo).to.be.a(\"string\");\r",
									"        pm.expect(dataReq[i].url).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-2));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes enviadas fueron insertadas\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        let imgFueInsertada = dataRes.imagenes.some( imagen => (imagen.titulo === dataReq[i].titulo) );\r",
									"        pm.expect(imgFueInsertada).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"titulo\": \"Imagen 007\",\r\n        \"url\": \"http://www.imagen002.com\"\r\n    },\r\n    {\r\n        \"titulo\": \"Imagen 008\",\r\n        \"url\": \"http://www.imagen003.com\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/2/agregar-imagenes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2",
								"agregar-imagenes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove imagenes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"eliminar-imagenes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición es un array\", function () {\r",
									"    pm.expect(dataReq).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataReq).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.have.all.keys([\"id\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataReq[i].id).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-2));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes enviadas fueron eliminadas\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        let imgFueEliminada = !(dataRes.imagenes.some( imagen => (imagen.id === dataReq[i].id) ));\r",
									"        pm.expect(imgFueEliminada).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": 1\r\n    },\r\n    {\r\n        \"id\": 3\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/2/eliminar-imagenes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2",
								"eliminar-imagenes"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminado correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminado correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"producto_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"producto_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"producto_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/{{producto_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"{{producto_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}