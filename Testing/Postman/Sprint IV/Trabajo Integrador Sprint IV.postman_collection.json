{
	"info": {
		"_postman_id": "47e46680-e8bb-461e-a520-20f50f5c46d1",
		"name": "Trabajo Integrador",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Categorías",
			"item": [
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Hotel de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-lujo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos son iguales a los enviados\", function () {\r",
									"    pm.expect(dataReq.titulo).to.eql(dataRes.titulo);\r",
									"    pm.expect(dataReq.descripcion).to.eql(dataRes.descripcion);\r",
									"    pm.expect(dataReq.urlImagen).to.eql(dataRes.urlImagen);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Hotel de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-lujo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Título Repetido",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Departamento de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-depto-lujo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].titulo).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].urlImagen).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0 e igual al enviado\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"    pm.expect(dataRes.id).to.eql(dataReq.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"titulo\": \"Parador\",\r\n    \"descripcion\": \"Para descansar en tus viajes...\",\r\n    \"urlImagen\": \"http://www.imagen-lujo-renovada.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/categorias\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"titulo\", \"descripcion\", \"urlImagen\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.urlImagen).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titulo\": \"Lujo\",\r\n    \"descripcion\": \"Hotel de lujo\",\r\n    \"urlImagen\": \"http://www.imagen-lujo-renovada.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/categorias",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"categoria_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"categoria_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"categoria_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/{{categoria_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"{{categoria_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/categorias/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/categorias/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"categorias",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ciudades",
			"item": [
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Bahía Blanca\",\r\n    \"pais\": \"Argentina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos son iguales a los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.pais).to.eql(dataRes.pais);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Bahía Blanca\",\r\n    \"pais\": \"Argentina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Nombre Repetido",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Bahía Blanca\",\r\n    \"pais\": \"Brasil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].pais).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzb3loYW5hQGdtYWlsLmNvbSIsImV4cCI6MTYzNzIzMDYxOSwiaWF0IjoxNjM3MjA5MDE5fQ.yMiXXIvKb0-y7R17bxK5Ny7OYgL_NVhSc5eQYY-sOAnZLs2NJn83oVYEIs4AB8giIvsRHNTKPaopcbjN0uZF7w",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0 e igual al enviado\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"    pm.expect(dataRes.id).to.eql(dataReq.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"nombre\": \"Miami\",\r\n    \"pais\": \"Estados Unidos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/ciudades\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"pais\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.pais).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Miami\",\r\n    \"pais\": \"Estados Unidos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/ciudades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"ciudad_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"ciudad_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"ciudad_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/{{ciudad_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"{{ciudad_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/ciudades/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ciudades/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ciudades",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Características",
			"item": [
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Gimnasio\",\r\n    \"icono\": \"fa-gimnasio\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos son iguales a los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.icono).to.eql(dataRes.icono);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Gimnasio\",\r\n    \"icono\": \"fa-gimnasio\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Nombre Repetido",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Gimnasio\",\r\n    \"icono\": \"fa-gym\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].icono).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0 e igual al enviado\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"    pm.expect(dataRes.id).to.eql(dataReq.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"nombre\": \"Masajes\",\r\n    \"icono\": \"fa-masajes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin iD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/caracteristicas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"icono\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.icono).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Masajes\",\r\n    \"icono\": \"fa-masajes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/caracteristicas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"caracteristica_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"caracteristica_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"caracteristica_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/{{caracteristica_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"{{caracteristica_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/caracteristicas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/caracteristicas/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"caracteristicas",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Imágenes",
			"item": [
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/imagenes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"titulo\", \"url\", \"producto\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.titulo).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.url).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.producto).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"El producto no es nulo, su ID no es nulo y el ID es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.producto).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.producto.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/imagenes/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"imagenes",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/imagenes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/imagenes/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"imagenes",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/imagenes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"titulo\", \"url\", \"producto\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].titulo).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].url).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos no son nulos, sus ID's no son nulos y los ID's son un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].producto.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbmFydUBob3RtYWlsLmNvbSIsImV4cCI6MTYzNzIzMDQzNCwiaWF0IjoxNjM3MjA4ODM0fQ.sc6kJyhoPFI4b0o0D2cBlqOQQDdL_l_aG2Jl99hIw8PHiNCQEFkwRz9SHHzspJsW_Xutf9nZx-M2_cJCo6qv4Q",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/imagenes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"imagenes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Productos",
			"item": [
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.politica).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Producto 001\",\r\n    \"descripcion\": \"El mejor producto\",\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 3\r\n    },\r\n    \"imagenes\": [\r\n        { \"titulo\": \"Imagen 001\", \"url\": \"http://www.imagen001.com\" }\r\n    ],\r\n    \"caracteristicas\": [\r\n        { \"id\": 1 },\r\n        { \"id\": 3 }\r\n    ],\r\n    \"latitud\": -32.888557,\r\n    \"longitud\": -68.850720,\r\n    \"direccion\": \"Moreno 323\",\r\n    \"politica\": {\r\n        \"normas\": \"normas importantes\",\r\n        \"saludYSeguridad\": \"higiene y cuidados varios\",\r\n        \"cancelacion\": \"prohibido cancelar\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.politica).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"    pm.expect(dataReq.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.politica).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.valoracion).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.descripcion).to.eql(dataRes.descripcion);\r",
									"    pm.expect(dataReq.ciudad.id).to.eql(dataRes.ciudad.id);\r",
									"    pm.expect(dataReq.categoria.id).to.eql(dataRes.categoria.id);\r",
									"    pm.expect(dataReq.latitud).to.eql(dataRes.latitud);\r",
									"    pm.expect(dataReq.longitud).to.eql(dataRes.longitud);\r",
									"    pm.expect(dataReq.direccion).to.eql(dataRes.direccion);\r",
									"\r",
									"    // Comparo las imágenes por título al no haber ID's en el Request\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataReq.imagenes[i].titulo).to.eql(dataRes.imagenes[i].titulo);\r",
									"    }\r",
									"\r",
									"    // Lo siguiente es necesario porque el orden del array de caracteristicas no es predecible (porque es un Set)\r",
									"    const caracteristicasIDsReq = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsReq.push(dataReq.caracteristicas[i].id);\r",
									"    }\r",
									"    const caracteristicasIDsRes = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsRes.push(dataRes.caracteristicas[i].id);\r",
									"    }\r",
									"    pm.expect(_.isEqual(_.sortBy(caracteristicasIDsReq), _.sortBy(caracteristicasIDsRes))).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"La política de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.politica).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.politica.id).to.not.be.null;\r",
									"    pm.expect(dataRes.politica.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.politica.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Producto 001\",\r\n    \"descripcion\": \"El mejor producto\",\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 3\r\n    },\r\n    \"imagenes\": [\r\n        { \"titulo\": \"Imagen 001\", \"url\": \"http://www.imagen001.com\" }\r\n    ],\r\n    \"caracteristicas\": [\r\n        { \"id\": 1 },\r\n        { \"id\": 3 }\r\n    ],\r\n    \"latitud\": -32.888557,\r\n    \"longitud\": -68.850720,\r\n    \"direccion\": \"Moreno 323\",\r\n    \"politica\": {\r\n        \"normas\": \"normas importantes\",\r\n        \"saludYSeguridad\": \"higiene y cuidados varios\",\r\n        \"cancelacion\": \"prohibido cancelar\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.politica).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.valoracion).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La política de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.politica).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.politica.id).to.not.be.null;\r",
									"    pm.expect(dataRes.politica.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.politica.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbmFydUBob3RtYWlsLmNvbSIsImV4cCI6MTYzNzIzMjA1NiwiaWF0IjoxNjM3MjEwNDU2fQ.lKTQnHwDsWsLmbsG3Tnh5fYzWzHADA4Xy94dn-nwH85c_DqcaYjRsqqBrBkUo4WX9hBBPs0pJqLbyRdwRXXwow",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL Paginado",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/paginado?page=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"paginado"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Ciudad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar?ciudad=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen como nombre el parámetro proporcionado\", function () {\r",
									"    const nombreEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad.nombre).eql(nombreEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar?ciudad=Mendoza",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar"
							],
							"query": [
								{
									"key": "ciudad",
									"value": "Mendoza"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Ciudad Paginado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/paginado/buscar?ciudad=Mendoza&page=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"paginado",
								"buscar"
							],
							"query": [
								{
									"key": "ciudad",
									"value": "Mendoza"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar?categoria=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen como título el parámetro proporcionado\", function () {\r",
									"    const tituloEnviado = request.url.split(\"=\").at(-1).replace('+', ' ');\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria.titulo).eql(tituloEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar?categoria=Hotel+Urbano",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar"
							],
							"query": [
								{
									"key": "categoria",
									"value": "Hotel+Urbano"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Categoria Paginado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/paginado/buscar?categoria=Hoteles&page=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"paginado",
								"buscar"
							],
							"query": [
								{
									"key": "categoria",
									"value": "Hoteles"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Ciudad & Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar?\");\r",
									"    pm.expect(request.url).to.have.string(\"ciudad\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"    pm.expect(request.url).to.have.string(\"&\");\r",
									"    pm.expect(request.url).to.have.string(\"categoria\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen como nombre el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const nombreEnviado = request.url.split(/[=&]+/).at(-3);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad.nombre).eql(nombreEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen como título el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const tituloEnviado = request.url.split(/[=&]+/).at(-1).replace('+', ' ');\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria.titulo).eql(tituloEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar?ciudad=Mendoza&categoria=Hotel+Urbano",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar"
							],
							"query": [
								{
									"key": "ciudad",
									"value": "Mendoza"
								},
								{
									"key": "categoria",
									"value": "Hotel+Urbano"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Fechas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar-con-fechas\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"    pm.expect(request.url).to.have.string(\"&\");\r",
									"    pm.expect(request.url).to.have.string(\"inicio\");\r",
									"    pm.expect(request.url).to.have.string(\"fin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar-con-fechas?inicio=2021-12-20&fin=2021-12-22",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar-con-fechas"
							],
							"query": [
								{
									"key": "inicio",
									"value": "2021-12-20"
								},
								{
									"key": "fin",
									"value": "2021-12-22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Ciudad & Fechas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/buscar-con-fechas\");\r",
									"    pm.expect(request.url).to.have.string(\"ciudad\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"    pm.expect(request.url).to.have.string(\"&\");\r",
									"    pm.expect(request.url).to.have.string(\"inicio\");\r",
									"    pm.expect(request.url).to.have.string(\"fin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen como nombre el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const nombreEnviado = request.url.split(/[=&]+/).at(-5);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad.nombre).eql(nombreEnviado);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/buscar-con-fechas?ciudad=Mendoza&inicio=2021-12-20&fin=2021-12-22",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"buscar-con-fechas"
							],
							"query": [
								{
									"key": "ciudad",
									"value": "Mendoza"
								},
								{
									"key": "inicio",
									"value": "2021-12-20"
								},
								{
									"key": "fin",
									"value": "2021-12-22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Fechas No Disponible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"fechas-no-disponible\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los strings obtenidos son fechas válidas\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        const date = new Date(dataRes[i]);\r",
									"        pm.expect(date).to.be.an(\"date\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/1/fechas-no-disponible",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"1",
								"fechas-no-disponible"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Es Favorito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"es-favorito\");\r",
									"    pm.expect(request.url).to.have.string(\"?\");\r",
									"    pm.expect(request.url).to.have.string(\"usuario\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.satisfy( value => (value === 'true' || value === 'false' ));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/2/es-favorito?usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2",
								"es-favorito"
							],
							"query": [
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Favoritos By Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/favoritos?usuario=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    let data = pm.response.json();\r",
									"    pm.expect(data).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                                \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].descripcion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].ciudad).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].categoria).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].imagenes).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].caracteristicas).to.be.a(\"array\");\r",
									"        pm.expect(dataRes[i].latitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].longitud).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].direccion).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].politica).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].valoracion).to.be.a(\"object\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las ciudades de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].ciudad).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].ciudad.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las categorías de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].categoria).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].categoria.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].categoria.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].imagenes.length; j++) {\r",
									"            pm.expect(dataRes[i].imagenes[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].imagenes[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        for(let j = 0; j < dataRes[i].caracteristicas.length; j++) {\r",
									"            pm.expect(dataRes[i].caracteristicas[j]).to.have.property(\"id\");\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.null;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.not.be.NaN;\r",
									"            pm.expect(dataRes[i].caracteristicas[j].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las políticas de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].politica).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].politica.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].politica.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/favoritos?usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"favoritos"
							],
							"query": [
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET FavoritosID By Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/favoritos-id?usuario=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"number\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/favoritos-id?usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"favoritos-id"
							],
							"query": [
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Puntuaciones Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/puntuaciones-cliente?usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"puntuaciones-cliente"
							],
							"query": [
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.politica).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"    pm.expect(dataReq.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.politica).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.valoracion).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La política de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.politica).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.politica.id).to.not.be.null;\r",
									"    pm.expect(dataRes.politica.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.politica.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.id).to.eql(dataRes.id);\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.descripcion).to.eql(dataRes.descripcion);\r",
									"    pm.expect(dataReq.ciudad.id).to.eql(dataRes.ciudad.id);\r",
									"    pm.expect(dataReq.categoria.id).to.eql(dataRes.categoria.id);\r",
									"    pm.expect(dataReq.latitud).to.eql(dataRes.latitud);\r",
									"    pm.expect(dataReq.longitud).to.eql(dataRes.longitud);\r",
									"    pm.expect(dataReq.direccion).to.eql(dataRes.direccion);\r",
									"\r",
									"    // Comparo las imágenes por título al no haber ID's en el Request\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataReq.imagenes[i].titulo).to.eql(dataRes.imagenes[i].titulo);\r",
									"    }\r",
									"\r",
									"    // Lo siguiente es necesario porque el orden del array de caracteristicas no es predecible (porque es un Set)\r",
									"    const caracteristicasIDsReq = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsReq.push(dataReq.caracteristicas[i].id);\r",
									"    }\r",
									"    const caracteristicasIDsRes = [];\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        caracteristicasIDsRes.push(dataRes.caracteristicas[i].id);\r",
									"    }\r",
									"    pm.expect(_.isEqual(_.sortBy(caracteristicasIDsReq), _.sortBy(caracteristicasIDsRes))).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"nombre\": \"Producto-003\",\r\n    \"descripcion\": \"Bad hotel, run for your life.\",\r\n    \"ciudad\": {\r\n        \"id\": 1\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"imagenes\": [],\r\n    \"caracteristicas\": null,\r\n    \"latitud\": 0,\r\n    \"longitud\": 0,\r\n    \"direccion\": \"Nueva Dirección 1000\",\r\n    \"politica\": {\r\n        \"normas\": \"Normas 03\",\r\n        \"saludYSeguridad\": \"Salud y Seguridad 03\",\r\n        \"cancelacion\": \"Cancelación 03\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/productos\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.politica).to.be.a(\"object\");\r",
									"    if (dataReq.imagenes != null) pm.expect(dataReq.imagenes).to.be.a(\"array\");\r",
									"    if (dataReq.caracteristicas != null) pm.expect(dataReq.caracteristicas).to.be.a(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataReq.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataReq.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la petición no tienen ID\", function () {\r",
									"    if (dataReq.imagenes != null) {\r",
									"        for(let i = 0; i < dataReq.imagenes.length; i++) {\r",
									"            pm.expect(dataReq.imagenes[i]).to.not.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la petición tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    if (dataReq.caracteristicas != null) {\r",
									"        for(let i = 0; i < dataReq.caracteristicas.length; i++) {\r",
									"            pm.expect(dataReq.caracteristicas[i]).to.have.property(\"id\");\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.null;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.not.be.NaN;\r",
									"            pm.expect(dataReq.caracteristicas[i].id).to.be.above(0);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Producto 002\",\r\n    \"descripcion\": \"El mejor producto\",\r\n    \"ciudad\": {\r\n        \"id\": 2\r\n    },\r\n    \"categoria\": {\r\n        \"id\": 1\r\n    },\r\n    \"imagenes\": [],\r\n    \"caracteristicas\": null,\r\n    \"latitud\": 0,\r\n    \"longitud\": 0,\r\n    \"direccion\": \"Nueva Dirección 1000\",\r\n    \"politica\": {\r\n        \"normas\": \"Normas 03\",\r\n        \"saludYSeguridad\": \"Salud y Seguridad 03\",\r\n        \"cancelacion\": \"Cancelación 03\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Imágenes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"agregar-imagenes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición es un array\", function () {\r",
									"    pm.expect(dataReq).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataReq).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.not.have.any.keys(\"id\");\r",
									"        pm.expect(dataReq[i]).to.have.all.keys([\"titulo\", \"url\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataReq[i].titulo).to.be.a(\"string\");\r",
									"        pm.expect(dataReq[i].url).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.politica).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.valoracion).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-2));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes enviadas fueron insertadas\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        let imgFueInsertada = dataRes.imagenes.some( imagen => (imagen.titulo === dataReq[i].titulo) );\r",
									"        pm.expect(imgFueInsertada).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"titulo\": \"Imagen 007\",\r\n        \"url\": \"http://www.imagen002.com\"\r\n    },\r\n    {\r\n        \"titulo\": \"Imagen 008\",\r\n        \"url\": \"http://www.imagen003.com\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/2/agregar-imagenes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2",
								"agregar-imagenes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Imágenes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"eliminar-imagenes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición es un array\", function () {\r",
									"    pm.expect(dataReq).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataReq).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.have.all.keys([\"id\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        pm.expect(dataReq[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataReq[i].id).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"descripcion\", \"ciudad\", \"categoria\", \"imagenes\", \"caracteristicas\",\r",
									"                                         \"latitud\", \"longitud\", \"direccion\", \"politica\", \"valoracion\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.descripcion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.ciudad).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.categoria).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.imagenes).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.caracteristicas).to.be.a(\"array\");\r",
									"    pm.expect(dataRes.latitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.longitud).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.direccion).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.politica).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.valoracion).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-2));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"La ciudad de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.ciudad).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.null;\r",
									"    pm.expect(dataRes.ciudad.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.ciudad.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La categoría de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.categoria).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.null;\r",
									"    pm.expect(dataRes.categoria.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.categoria.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.imagenes.length; i++) {\r",
									"        pm.expect(dataRes.imagenes[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.imagenes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las características de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.caracteristicas.length; i++) {\r",
									"        pm.expect(dataRes.caracteristicas[i]).to.have.property(\"id\");\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.null;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes.caracteristicas[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Las imágenes enviadas fueron eliminadas\", function () {\r",
									"    for(let i = 0; i < dataReq.length; i++) {\r",
									"        let imgFueEliminada = !(dataRes.imagenes.some( imagen => (imagen.id === dataReq[i].id) ));\r",
									"        pm.expect(imgFueEliminada).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id1 = pm.environment.get(\"producto_remove_imagen1_id\");\r",
									"\r",
									"if (!id1)\r",
									"    pm.environment.set(\"producto_remove_imagen1_id\", 10);\r",
									"else\r",
									"    pm.environment.set(\"producto_remove_imagen1_id\", parseInt(id1)+3);\r",
									"\r",
									"\r",
									"let id2 = pm.environment.get(\"producto_remove_imagen2_id\");\r",
									"\r",
									"if (!id2)\r",
									"    pm.environment.set(\"producto_remove_imagen2_id\", 11);\r",
									"else\r",
									"    pm.environment.set(\"producto_remove_imagen2_id\", parseInt(id2)+3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": {{producto_remove_imagen1_id}}\r\n    },\r\n    {\r\n        \"id\": {{producto_remove_imagen2_id}}\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/2/eliminar-imagenes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"2",
								"eliminar-imagenes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Puntuación",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"agregar-puntuacion\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"cliente\", \"puntos\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.puntos).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'OK'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('OK');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cliente\": {\r\n        \"id\": 2\r\n    },\r\n    \"puntos\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/3/agregar-puntuacion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"3",
								"agregar-puntuacion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Puntuación",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"actualizar-puntuacion\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"cliente\", \"puntos\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.puntos).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'OK'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('OK');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cliente\": {\r\n        \"id\": 2\r\n    },\r\n    \"puntos\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/3/actualizar-puntuacion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"3",
								"actualizar-puntuacion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Puntuación",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"    pm.expect(request.url).to.have.string(\"eliminar-puntuacion\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"cliente\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'OK'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('OK');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cliente\": {\r\n        \"id\": 2\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/productos/3/eliminar-puntuacion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"3",
								"eliminar-puntuacion"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminado correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminado correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"producto_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"producto_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"producto_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/{{producto_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"{{producto_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/productos/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/productos/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"productos",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Puntuacion",
			"item": [
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/puntuaciones/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"producto\", \"cliente\", \"puntos\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.puntos).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.producto.id).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.cliente.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/puntuaciones/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"puntuaciones",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/puntuaciones/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/puntuaciones/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"puntuaciones",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/puntuaciones\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"producto\", \"cliente\", \"puntos\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].puntos).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].producto.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].cliente.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/puntuaciones",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"puntuaciones"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/puntuaciones/buscar?producto=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"producto\", \"cliente\", \"puntos\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].puntos).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].cliente.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/puntuaciones/buscar?producto=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"puntuaciones",
								"buscar"
							],
							"query": [
								{
									"key": "producto",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/puntuaciones/buscar?usuario=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"producto\", \"cliente\", \"puntos\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].puntos).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].producto.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/puntuaciones/buscar?usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"puntuaciones",
								"buscar"
							],
							"query": [
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Producto & Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/puntuaciones/buscar?\");\r",
									"    pm.expect(request.url).to.have.string(\"producto\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"    pm.expect(request.url).to.have.string(\"&\");\r",
									"    pm.expect(request.url).to.have.string(\"usuario\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"producto\", \"cliente\", \"puntos\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].puntos).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const idEnviado = request.url.split(/[=&]+/).at(-3);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const idEnviado = request.url.split(/[=&]+/).at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/puntuaciones/buscar?producto=1&usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"puntuaciones",
								"buscar"
							],
							"query": [
								{
									"key": "producto",
									"value": "1"
								},
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reservas",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/reservas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                         \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.producto.id).to.not.be.null;\r",
									"    pm.expect(dataReq.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                         \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.producto.id).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.horaInicio).to.eql(dataRes.horaInicio);\r",
									"    pm.expect(dataReq.fechaInicial).to.eql(dataRes.fechaInicial);\r",
									"    pm.expect(dataReq.fechaFinal).to.eql(dataRes.fechaFinal);\r",
									"    pm.expect(dataReq.producto.id).to.eql(dataRes.producto.id);\r",
									"    pm.expect(dataReq.cliente.id).to.eql(dataRes.cliente.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmZXJjaHVAeWFob28uY29tIiwiZXhwIjoxNjM4MzQzNzY0LCJpYXQiOjE2MzgzMjIxNjR9.QInv9tMP5gfNtyX-5bZIePDwcK4CaFvHlC0TPO_-nQaGrK1im8F3U-tpEXU_P-ljadXRkY1jdyS0U3RIsoHgTg",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horaInicio\": \"04:00\",\r\n    \"fechaInicial\": \"2022-06-09\",\r\n    \"fechaFinal\": \"2022-06-14\",\r\n    \"producto\": {\r\n        \"id\": 2\r\n    },\r\n    \"cliente\": {\r\n        \"id\": 3\r\n    },\r\n    \"ciudadOrigen\": \"Lima\",\r\n    \"infoCovid\": \"¿Qué es covid?\",\r\n    \"vacunadoCovid\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/reservas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/reservas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                         \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.producto.id).to.not.be.null;\r",
									"    pm.expect(dataReq.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"horaInicio\": \"16:00\",\r\n    \"fechaInicial\": \"2022-06-09\",\r\n    \"fechaFinal\": \"2022-06-14\",\r\n    \"producto\": {\r\n        \"id\": 2\r\n    },\r\n    \"cliente\": {\r\n        \"id\": 3\r\n    },\r\n    \"ciudadOrigen\": \"Lima\",\r\n    \"infoCovid\": \"¿Qué es covid?\",\r\n    \"vacunadoCovid\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/reservas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                         \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.producto.id).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.cliente.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/reservas/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/reservas/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/reservas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                             \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].horaInicio).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaInicial).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaFinal).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].ciudadOrigen).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].infoCovid).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].vacunadoCovid).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].producto.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].cliente.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmZXJjaHVAeWFob28uY29tIiwiZXhwIjoxNjM3ODI0MDcxLCJpYXQiOjE2Mzc4MDI0NzF9.j3GnhT-z-e-v3cDQVE2kflpsxhJP4RdpT5yDyUYJbqiPGNyeXgzcnOeNLlr0a8M1R-g32Fb-IwDYkrQ0tpRv-w",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/reservas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/buscar?producto=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                                \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].horaInicio).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaInicial).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaFinal).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].ciudadOrigen).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].infoCovid).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].vacunadoCovid).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].cliente.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].cliente.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/reservas/buscar?producto=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"buscar"
							],
							"query": [
								{
									"key": "producto",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/buscar?usuario=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                                \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].horaInicio).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaInicial).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaFinal).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].ciudadOrigen).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].infoCovid).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].vacunadoCovid).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].producto.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].producto.id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/reservas/buscar?usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"buscar"
							],
							"query": [
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET By Producto & Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/buscar?\");\r",
									"    pm.expect(request.url).to.have.string(\"producto\");\r",
									"    pm.expect(request.url).to.have.string(\"=\");\r",
									"    pm.expect(request.url).to.have.string(\"&\");\r",
									"    pm.expect(request.url).to.have.string(\"usuario\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                                \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].horaInicio).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaInicial).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].fechaFinal).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].producto).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].cliente).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].ciudadOrigen).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].infoCovid).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].vacunadoCovid).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los productos de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const idEnviado = request.url.split(/[=&]+/).at(-3);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los clientes de la respuesta tienen como ID el parámetro proporcionado\", function () {\r",
									"    // Regex que hace que '=' y '&' hagan de separadores\r",
									"    const idEnviado = request.url.split(/[=&]+/).at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].cliente.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/reservas/buscar?producto=1&usuario=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"buscar"
							],
							"query": [
								{
									"key": "producto",
									"value": "1"
								},
								{
									"key": "usuario",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/reservas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"       pm.expect(dataReq).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                            \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.producto.id).to.not.be.null;\r",
									"    pm.expect(dataReq.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                         \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.producto.id).to.not.be.null;\r",
									"    pm.expect(dataRes.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataRes.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.id).to.eql(dataRes.id);\r",
									"    pm.expect(dataReq.horaInicio).to.eql(dataRes.horaInicio);\r",
									"    pm.expect(dataReq.fechaInicial).to.eql(dataRes.fechaInicial);\r",
									"    pm.expect(dataReq.fechaFinal).to.eql(dataRes.fechaFinal);\r",
									"    pm.expect(dataReq.producto.id).to.eql(dataRes.producto.id);\r",
									"    pm.expect(dataReq.cliente.id).to.eql(dataRes.cliente.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2,\r\n    \"horaInicio\": \"08:00\",\r\n    \"fechaInicial\": \"2021-12-12\",\r\n    \"fechaFinal\": \"2021-12-19\",\r\n    \"producto\": {\r\n        \"id\": 1\r\n    },\r\n    \"cliente\": {\r\n        \"id\": 2\r\n    },\r\n    \"ciudadOrigen\": \"Ciudad nueva\",\r\n    \"infoCovid\": \"Info Covid nueva\",\r\n    \"vacunadoCovid\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/reservas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin iD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/reservas\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"       pm.expect(dataReq).to.have.all.keys([\"horaInicio\", \"fechaInicial\", \"fechaFinal\", \"producto\", \"cliente\",\r",
									"                                            \"ciudadOrigen\", \"infoCovid\", \"vacunadoCovid\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq).to.not.have.property(\"id\");\r",
									"    pm.expect(dataReq.horaInicio).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaInicial).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.fechaFinal).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.producto).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.cliente).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.ciudadOrigen).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.infoCovid).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.vacunadoCovid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El producto de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.producto).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.producto.id).to.not.be.null;\r",
									"    pm.expect(dataReq.producto.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.producto.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El cliente de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.cliente).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.null;\r",
									"    pm.expect(dataReq.cliente.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.cliente.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horaInicio\": \"08:00\",\r\n    \"fechaInicial\": \"2022-06-09\",\r\n    \"fechaFinal\": \"2022-06-14\",\r\n    \"producto\": {\r\n        \"id\": 2\r\n    },\r\n    \"cliente\": {\r\n        \"id\": 3\r\n    },\r\n    \"ciudadOrigen\": \"Ciudad nueva\",\r\n    \"infoCovid\": \"Info Covid nueva\",\r\n    \"vacunadoCovid\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/reservas",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"reserva_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"reserva_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"reserva_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminada correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminada correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/reservas/{{reserva_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"{{reserva_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/reservas/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/reservas/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"reservas",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/roles\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"test-rol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/roles\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"ROLE_TEST\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/roles/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/roles/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/roles/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/roles/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/roles\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/roles\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.id).to.eql(dataRes.id);\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"nombre\": \"ROLE_VENDEDOR_ACTUALIZADO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/roles\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"ROLE_VENDEDOR_ACTUALIZADO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/roles/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminado correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminado correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"rol_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"rol_delete_id\", 4);\r",
									"else\r",
									"    pm.environment.set(\"rol_delete_id\", parseInt(id)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/roles/{{rol_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles",
								"{{rol_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/roles/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/roles/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roles",
								"100"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 300 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.rol.id).to.not.be.null;\r",
									"    pm.expect(dataReq.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.rol.id).to.not.be.null;\r",
									"    pm.expect(dataRes.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"    pm.expect(dataReq.rol.id).to.eql(dataRes.rol.id);\r",
									"    pm.expect(dataReq.habilitado).to.eql(dataRes.habilitado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Carlos\",\r\n    \"apellido\": \"Figueroa\",\r\n    \"email\": \"carlos@figueroa.com\",\r\n    \"contrasena\": \"soycarlos\",\r\n    \"rol\": {\r\n        \"id\": 3\r\n    },\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"contrasena\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.rol.id).to.not.be.null;\r",
									"    pm.expect(dataReq.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Carlos\",\r\n    \"apellido\": \"Figueroa\",\r\n    \"email\": \"carlos@figueroa.com\",\r\n    \"contrasena\": \"soycarlos\",\r\n    \"rol\": {\r\n        \"id\": 3\r\n    },\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/usuarios/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.rol.id).to.not.be.null;\r",
									"    pm.expect(dataRes.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.rol.id).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/usuarios/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/usuarios/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/usuarios/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE By Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/usuarios/buscar?email=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.rol.id).to.not.be.null;\r",
									"    pm.expect(dataRes.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los email's de la respuesta coinciden con el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/usuarios/buscar?email=admin@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"buscar"
							],
							"query": [
								{
									"key": "email",
									"value": "admin@gmail.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 3 elementos\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"rol\", \"habilitado\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].apellido).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].email).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].rol).to.be.a(\"object\");\r",
									"        pm.expect(dataRes[i].habilitado).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los roles de la respuesta tienen un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].rol).to.have.property(\"id\");\r",
									"        pm.expect(dataRes[i].rol.id).to.not.be.null;\r",
									"        pm.expect(dataRes[i].rol.id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].rol.id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"contrasena\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.rol.id).to.not.be.null;\r",
									"    pm.expect(dataReq.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.rol.id).to.not.be.null;\r",
									"    pm.expect(dataRes.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.id).to.eql(dataRes.id);\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"    pm.expect(dataReq.rol.id).to.eql(dataRes.rol.id);\r",
									"    pm.expect(dataReq.habilitado).to.eql(dataRes.habilitado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"nombre\": \"Tito\",\r\n    \"apellido\": \"Sánchez\",\r\n    \"email\": \"soytito@sanchez.com\",\r\n    \"contrasena\": \"elgrantito\",\r\n    \"rol\": {\r\n        \"id\": 3\r\n    },\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la petición tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataReq.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataReq.rol.id).to.not.be.null;\r",
									"    pm.expect(dataReq.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataReq.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Tito\",\r\n    \"apellido\": \"Sánchez\",\r\n    \"email\": \"soytito@sanchez.com\",\r\n    \"contrasena\": \"elgrantito\",\r\n    \"rol\": {\r\n        \"id\": 3\r\n    },\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"usuario_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"usuario_delete_id\", 5);\r",
									"else\r",
									"    pm.environment.set(\"usuario_delete_id\", parseInt(id)+4);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/usuarios/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminado correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminado correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios/{{usuario_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"{{usuario_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/usuarios/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"100"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admins",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/admins\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 300 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"    pm.expect(dataReq.habilitado).to.eql(dataRes.habilitado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Nuevo\",\r\n    \"apellido\": \"Admin\",\r\n    \"email\": \"nuevo@admin.com\",\r\n    \"contrasena\": \"soyunnuevoadmin\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admins",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/admins\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Nuevo\",\r\n    \"apellido\": \"Admin\",\r\n    \"email\": \"nuevo@admin.com\",\r\n    \"contrasena\": \"soyunnuevoadmin\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admins",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/admins/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admins/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/admins/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admins/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE By Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/admins/buscar?email=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los email's de la respuesta coinciden con el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admins/buscar?email=admin@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins",
								"buscar"
							],
							"query": [
								{
									"key": "email",
									"value": "admin@gmail.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/admins\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 1 elemento\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].apellido).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].email).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].habilitado).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admins",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/admins\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.id).to.eql(dataRes.id);\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"    pm.expect(dataReq.habilitado).to.eql(dataRes.habilitado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"nombre\": \"Nombre_Actualizado\",\r\n    \"apellido\": \"Apellido_Actualizado\",\r\n    \"email\": \"admin@gmail.com\",\r\n    \"contrasena\": \"admin\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admins",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/admins\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Nombre_Actualizado\",\r\n    \"apellido\": \"Apellido_Actualizado\",\r\n    \"email\": \"admin@gmail.com\",\r\n    \"contrasena\": \"admin\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admins",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"admin_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"admin_delete_id\", 6);\r",
									"else\r",
									"    pm.environment.set(\"admin_delete_id\", parseInt(id)+4);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/admins/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminado correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminado correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admins/{{admin_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins",
								"{{admin_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/admins/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admins/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admins",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clientes",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/clientes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 300 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"    pm.expect(dataReq.habilitado).to.eql(dataRes.habilitado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Nuevo\",\r\n    \"apellido\": \"Cliente\",\r\n    \"email\": \"nuevo@cliente.com\",\r\n    \"contrasena\": \"soyunnuevocliente\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Con ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/clientes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no puede recibir un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 100,\r\n    \"nombre\": \"Nuevo\",\r\n    \"apellido\": \"Cliente\",\r\n    \"email\": \"nuevo@cliente.com\",\r\n    \"contrasena\": \"soyunnuevocliente\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Inhabilitado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/clientes/disabled\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 300 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '201 Created'\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"});\r",
									"\r",
									"pm.test(\"El atributo 'habilitado' es false\", function () {\r",
									"    pm.expect(dataRes.habilitado).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"cliente_nuevo_count\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"cliente_nuevo_count\", 1);\r",
									"else\r",
									"    pm.environment.set(\"cliente_nuevo_count\", parseInt(id)+1);\r",
									"\r",
									"id = pm.environment.get(\"cliente_nuevo_count\");\r",
									"\r",
									"pm.environment.set(\"cliente_nuevo_email\", \"clientenuevo\"+id+\"@hostinventado.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Nombre\",\r\n    \"apellido\": \"Apellido\",\r\n    \"email\": \"{{cliente_nuevo_email}}\",\r\n    \"contrasena\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes/disabled",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"disabled"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El ID recibido es igual al enviado\", function () {\r",
									"    const idEnviado = parseInt(request.url.split(\"/\").at(-1));\r",
									"    pm.expect(dataRes.id).to.eql(idEnviado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/clientes/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE Inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es un error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/clientes/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ONE By Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/buscar?email=\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los email's de la respuesta coinciden con el parámetro proporcionado\", function () {\r",
									"    const idEnviado = request.url.split(\"=\").at(-1);\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].producto.id).eql(parseInt(idEnviado));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/clientes/buscar?email=ferchu@yahoo.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"buscar"
							],
							"query": [
								{
									"key": "email",
									"value": "ferchu@yahoo.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo GET\", () => {\r",
									"    pm.expect(request.method).eql(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/clientes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta es un array\", function () {\r",
									"    pm.expect(dataRes).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Array con al menos 2 elemento\", function () {\r",
									"    pm.expect(dataRes).to.have.lengthOf.at.least(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Elementos del array con los atributos esperados\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de los elementos del array\", () => {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i]).to.be.an(\"object\");\r",
									"        pm.expect(dataRes[i].id).to.be.a(\"number\");\r",
									"        pm.expect(dataRes[i].nombre).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].apellido).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].email).to.be.a(\"string\");\r",
									"        pm.expect(dataRes[i].habilitado).to.be.a(\"boolean\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Los ID's obtenidos son números válidos mayores a 0\", function () {\r",
									"    for(let i = 0; i < dataRes.length; i++) {\r",
									"        pm.expect(dataRes[i].id).to.not.be.NaN;\r",
									"        pm.expect(dataRes[i].id).to.be.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/clientes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/clientes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.id).to.eql(dataRes.id);\r",
									"    pm.expect(dataReq.nombre).to.eql(dataRes.nombre);\r",
									"    pm.expect(dataReq.apellido).to.eql(dataRes.apellido);\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"    pm.expect(dataReq.habilitado).to.eql(dataRes.habilitado);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2,\r\n    \"nombre\": \"Ana Laura\",\r\n    \"apellido\": \"Ramírez García\",\r\n    \"email\": \"soyanaru@gmail.com\",\r\n    \"contrasena\": \"new_password\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Sin ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/clientes\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '400 Bad Request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"nombre\", \"apellido\", \"email\", \"contrasena\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es con error, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 400\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no puede recibir un ID'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('requiere de un ID');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Ana Laura\",\r\n    \"apellido\": \"Ramírez García\",\r\n    \"email\": \"soyanaru@gmail.com\",\r\n    \"contrasena\": \"new_password\",\r\n    \"habilitado\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Exitoso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"cliente_delete_id\");\r",
									"\r",
									"if (!id)\r",
									"    pm.environment.set(\"cliente_delete_id\", 7);\r",
									"else\r",
									"    pm.environment.set(\"cliente_delete_id\", parseInt(id)+4);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");      // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'eliminado correctamente'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('eliminado correctamente');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes/{{cliente_delete_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"{{cliente_delete_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo DELETE\", () => {\r",
									"    pm.expect(request.method).eql(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '404 Not Found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body de la petición vacío\", function () {\r",
									"    pm.expect(request.data).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es errónea, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"timestamp\", \"status\", \"error\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.status).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status con código 404\", function () {\r",
									"    pm.expect(dataRes.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error con texto 'no existe'\", function () {\r",
									"    pm.expect(dataRes.error).to.have.string('no existe');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Favorito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/\");\r",
									"    pm.expect(request.url).to.have.string(\"agregar-favorito\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'OK'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('OK');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmZXJjaHVAeWFob28uY29tIiwiZXhwIjoxNjM3ODk3MTc0LCJpYXQiOjE2Mzc4NzU1NzR9.ciB_d2XyUF_k7D7-wcantAcWxWONouGHQex0Ujp93zFHGTLosOQbHzaeBZQuWbuPR5AZbuRwkCj1sdlF9YDFlQ",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes/3/agregar-favorito",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"3",
								"agregar-favorito"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Favorito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo PUT\", () => {\r",
									"    pm.expect(request.method).eql(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).to.have.string(\"http://localhost:8080/clientes/\");\r",
									"    pm.expect(request.url).to.have.string(\"eliminar-favorito\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 200 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.have.all.keys([\"id\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje con texto 'OK'\", function () {\r",
									"    pm.expect(dataRes.message).to.have.string('OK');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clientes/3/eliminar-favorito",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"3",
								"eliminar-favorito"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verificar Cuenta",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/clientes/registrationConfirm?token=8e3e8244-2b77-4f0f-9aa1-f38d9a06fc8b",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clientes",
								"registrationConfirm"
							],
							"query": [
								{
									"key": "token",
									"value": "8e3e8244-2b77-4f0f-9aa1-f38d9a06fc8b"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Autenticación",
			"item": [
				{
					"name": "Validate User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios/validate-user-login\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 300 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"email\", \"contrasena\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.email).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.contrasena).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"id\", \"nombre\", \"apellido\", \"email\", \"rol\", \"habilitado\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.id).to.be.a(\"number\");\r",
									"    pm.expect(dataRes.nombre).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.apellido).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.email).to.be.a(\"string\");\r",
									"    pm.expect(dataRes.rol).to.be.a(\"object\");\r",
									"    pm.expect(dataRes.habilitado).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"El ID obtenido es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"El rol de la respuesta tiene un ID no nulo que es un número válido mayor a 0\", function () {\r",
									"    pm.expect(dataRes.rol).to.have.property(\"id\");\r",
									"    pm.expect(dataRes.rol.id).to.not.be.null;\r",
									"    pm.expect(dataRes.rol.id).to.not.be.NaN;\r",
									"    pm.expect(dataRes.rol.id).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Los datos recibidos coinciden con los enviados\", function () {\r",
									"    pm.expect(dataReq.email).to.eql(dataRes.email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ferchu@yahoo.com\",\r\n    \"contrasena\": \"tedesarmoelauto\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios/validate-user-login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"validate-user-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin Existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios/login\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"username\", \"password\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.username).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.password).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"token\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.token).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin@gmail.com\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Cliente Existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El método es de tipo POST\", () => {\r",
									"    pm.expect(request.method).eql(\"POST\");\r",
									"});\r",
									"\r",
									"pm.test(\"La URL de la petición es la esperada\", () => {\r",
									"    pm.expect(request.url).eql(\"http://localhost:8080/usuarios/login\");\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la petición y es igual a 'application/json'\", () => {\r",
									"    pm.expect(request.headers).to.have.property(\"content-type\");\r",
									"    pm.expect(request.headers['content-type']).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Existe la propiedad Content-Type en el encabezado de la respuesta y es igual a 'application/json'\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 500 ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status igual a '200 OK'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"const dataReq = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Petición con los atributos esperados\", function () {\r",
									"    pm.expect(dataReq).to.not.have.any.keys(\"id\");\r",
									"    pm.expect(dataReq).to.have.all.keys([\"username\", \"password\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la petición\", () => {\r",
									"    pm.expect(dataReq).to.be.an(\"object\");\r",
									"    pm.expect(dataReq.username).to.be.a(\"string\");\r",
									"    pm.expect(dataReq.password).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta es correcta, tiene body y es un JSON\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");  // Es otra forma de chequear las keys del JSON\r",
									"});\r",
									"\r",
									"const dataRes = pm.response.json();\r",
									"\r",
									"pm.test(\"Body de la respuesta no vacío\", function () {\r",
									"    pm.expect(dataRes).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta con los atributos esperados\", function () {\r",
									"    pm.expect(dataRes).to.have.all.keys([\"token\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos de la respuesta\", () => {\r",
									"    pm.expect(dataRes).to.be.an(\"object\");\r",
									"    pm.expect(dataRes.token).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"ferchu@yahoo.com\",\r\n    \"password\": \"tedesarmoelauto\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Cliente Nuevo",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"clientenuevo@hostinventado.com\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/usuarios/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"usuarios",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}